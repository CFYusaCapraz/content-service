import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.bmuschko.docker-spring-boot-application' version '9.4.0'
}

group = 'com.cyberfreak.services'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

bootWar {
    archiveFileName = "${rootProject.name}.war"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.mapstruct:mapstruct:1.6.0'
    implementation 'org.jetbrains:annotations:24.0.0'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.0'
    annotationProcessor 'io.github.anweber:mapstruct-springlazy:1.0.0'
    annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('syncWar', Sync) {
    group 'docker-build'
    Task cleanTask = tasks.named('clean').get()
    Task assembleTask = tasks.named('assemble').get()
    dependsOn cleanTask, assembleTask
    assembleTask.mustRunAfter cleanTask
    from bootWar.archiveFile
    into createDockerfile.destDir
}

tasks.register('createDockerfile', Dockerfile) {
    group 'docker-build'
    dependsOn syncWar

    String defaultActiveProfile = getPropertyValue('defaultActiveProfile', 'default')

    from('amazoncorretto:17-alpine-jdk')
    workingDir '/app'
    environmentVariable 'ACTIVE_PROFILE', defaultActiveProfile
    copyFile bootWar.archiveFileName.get(), '.'
    entryPoint 'java'
    defaultCommand '-jar', "${bootWar.archiveFileName.get()}", '--spring.profiles.active=${ACTIVE_PROFILE}'
    exposePort 8080
    runCommand 'apk --update --no-cache add curl'
    instruction "HEALTHCHECK CMD curl -f http://localhost:8080/actuator/health || exit 1"
}

tasks.register('buildAppImage', DockerBuildImage) {
    group 'docker-build'
    dependsOn 'createDockerfile'

    String dockerNamespace = getPropertyValue('dockerNamespace', 'cfyusacapraz')
    images.add("${dockerNamespace}/${rootProject.name}:${version}")
    images.add("${dockerNamespace}/${rootProject.name}:latest")
}

tasks.register("pushAppImage", DockerPushImage) {
    group 'docker-build'
    dependsOn 'buildAppImage'

    String dockerNamespace = getPropertyValue('dockerNamespace', 'cfyusacapraz')

    registryCredentials {
        url = getPropertyValue('dockerRepositoryUrl', "https://hub.docker.com/r/${dockerNamespace}/content-service")
        username = getPropertyValue("dockerUsername", System.getenv('DOCKER_USERNAME'))
        password = getPropertyValue("dockerPassword", System.getenv('DOCKER_PASSWORD'))
        email = getPropertyValue('dockerEmail', System.getenv('DOCKER_EMAIL'))
    }

    images.add("${dockerNamespace}/${rootProject.name}:latest")
}

String getPropertyValue(String propertyName, String defaultValue) {
    if (!defaultValue) {
        throw new IllegalArgumentException("Default value must be provided ($propertyName)")
    }
    String value = System.getProperty(propertyName)

    if (!value) {
        value = project.hasProperty(propertyName) ? project.property(propertyName) : null
    }

    return value ?: defaultValue
}
